/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.DataGenerator;
import Business.Environment;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.apache.log4j.Logger;
import org.jfree.chart.plot.PiePlot3D;

/**
 *
 * @author soumya
 */
public class ViewReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewReportsJPanel
     */
    JPanel userProcessContainer;
    Environment system;
    String[] values;
    String allerginValues;
    List<String> networkList;
    List<String> deficiencyList;
    List<String> dishList;
    List<String> allerginList;
    private static Logger log = Logger.getLogger(ViewReportsJPanel.class);
    private static final String CLASS_NAME = ViewReportsJPanel.class.getName();
    public ViewReportsJPanel(JPanel userProcessContainer,Environment system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
         this.networkList= new ArrayList<>();
         this.deficiencyList= new ArrayList<>();
         this.dishList= new ArrayList<>();
         this.allerginList = new ArrayList<>();
         addDishes();
         addAllergins();
    }
    
    public void addAllergins(){
         try {
            String filePat = "./allergin data.txt";
            File file = new File(filePat);
            Scanner input = new Scanner(file);
            
            while(input.hasNext()){
                String data = input.next();
                allerginValues = data;
                 allerginList.add(allerginValues);
                 System.out.println(allerginValues);
                }
             
        } catch (FileNotFoundException ex) {
            
            log.error("allergin data.txt" +ex);
        }
       
    }
    
    public void addDishes(){
        try {
            String filePath = "./prescription data.txt";
            File file = new File(filePath);
            Scanner input = new Scanner(file);
            
            while(input.hasNext()){
                String data = input.next();
                 values = data.split(",");
                 networkList.add(values[0].trim());
                 deficiencyList.add(values[1].trim());
                 dishList.add(values[2].trim());
                 System.out.println(values[2]);
                }
           
        } catch (Exception ex) {
            log.error("prescription data.txt unavailable" +ex);
            
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        report1Btn = new javax.swing.JButton();
        report2Btn = new javax.swing.JButton();
        report3Btn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(230, 224, 224));
        setPreferredSize(new java.awt.Dimension(2000, 1200));

        report1Btn.setBackground(new java.awt.Color(0, 0, 0));
        report1Btn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        report1Btn.setForeground(new java.awt.Color(255, 255, 255));
        report1Btn.setText("TOP DISHES SALES ACROSS NETWORKS");
        report1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report1BtnActionPerformed(evt);
            }
        });

        report2Btn.setBackground(new java.awt.Color(0, 0, 0));
        report2Btn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        report2Btn.setForeground(new java.awt.Color(255, 255, 255));
        report2Btn.setText("MOST COMMON DEFICIENCIES ACROSS NETWORKS");
        report2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report2BtnActionPerformed(evt);
            }
        });

        report3Btn.setBackground(new java.awt.Color(0, 0, 0));
        report3Btn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        report3Btn.setForeground(new java.awt.Color(255, 255, 255));
        report3Btn.setText("MOST AFFECTED ALLERGIES");
        report3Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report3BtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(480, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(report3Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(report2Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(report1Btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(898, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(report1Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(report2Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(report3Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void report1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report1BtnActionPerformed
        
         DefaultCategoryDataset dcd= new DefaultCategoryDataset();
        int Steak=600,kombu=400,Asparagus=400,SteamedMussels=500,ArugulaSalad=600,TurkeyPicadillo=500,WhiteBeanTostada=250,parsleysalad=700;
        int Steak1=800,kombu1=600,Asparagus1=400,SteamedMussels1=600,ArugulaSalad1=900,TurkeyPicadillo1=900,WhiteBeanTostada1=300,parsleysalad1=800;
        int Steak2=400,kombu2=330,Asparagus2=250,SteamedMussels2=200,ArugulaSalad2=30,TurkeyPicadillo2=450,WhiteBeanTostada2=500,parsleysalad2=500;
         
         for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("Steak")){
              Steak++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("kombu")){
              kombu++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("Asparagus")){
              Asparagus++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("SteamedMussels")){
              SteamedMussels++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("ArugulaSalad")){
              ArugulaSalad++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("TurkeyPicadillo")){
              TurkeyPicadillo++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("WhiteBeanTostada")){
              WhiteBeanTostada++;
             }
           if((network.equalsIgnoreCase("Boston")) && dish.equalsIgnoreCase("parsleysalad")){
              parsleysalad++;
             }
           
            }
         dcd.setValue(Steak, "Boston", "Steak");
         dcd.setValue(kombu, "Boston", "kombu");
         dcd.setValue(Asparagus, "Boston", "Asparagus");
         dcd.setValue(SteamedMussels, "Boston", "SteamedMussels");
         dcd.setValue(ArugulaSalad, "Boston", "ArugulaSalad");
         dcd.setValue(TurkeyPicadillo, "Boston", "TurkeyPicadillo");
         dcd.setValue(WhiteBeanTostada, "Boston", "WhiteBeanTostada");
         dcd.setValue(parsleysalad, "Boston", "parsleysalad");
         
       JFreeChart jchart = ChartFactory.createBarChart("Top Dishes By Sales", "Networks", "Sales", dcd, PlotOrientation.VERTICAL, true, true, false);
       
       CategoryPlot plot = jchart.getCategoryPlot();
       plot.setRangeGridlinePaint(Color.BLACK);
       
       
       ChartFrame chartFrame = new ChartFrame("Dishes",jchart,true);
       chartFrame.setVisible(true);
       chartFrame.setSize(2000,1000); 
       
       
       for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("Steak")){
              Steak1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("kombu")){
              kombu1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("Asparagus")){
              Asparagus1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("SteamedMussels")){
              SteamedMussels1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("ArugulaSalad")){
              ArugulaSalad1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("TurkeyPicadillo")){
              TurkeyPicadillo1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("WhiteBeanTostada")){
              WhiteBeanTostada1++;
             }
           if((network.equalsIgnoreCase("New York")) && dish.equalsIgnoreCase("parsleysalad")){
              parsleysalad1++;
             }
           
            }
         dcd.setValue(Steak1, "New York", "Steak");
         dcd.setValue(kombu1, "New York", "kombu");
         dcd.setValue(Asparagus1, "New York", "Asparagus");
         dcd.setValue(SteamedMussels1, "New York", "SteamedMussels");
         dcd.setValue(ArugulaSalad1, "New York", "ArugulaSalad");
         dcd.setValue(TurkeyPicadillo1, "New York", "TurkeyPicadillo");
         dcd.setValue(WhiteBeanTostada1, "New York", "WhiteBeanTostada");
         dcd.setValue(parsleysalad1, "New York", "parsleysalad");
         
        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);
        
        for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("Steak")){
              Steak2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("kombu")){
              kombu2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("Asparagus")){
              Asparagus2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("SteamedMussels")){
              SteamedMussels2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("ArugulaSalad")){
              ArugulaSalad2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("TurkeyPicadillo")){
              TurkeyPicadillo2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("WhiteBeanTostada2")){
              WhiteBeanTostada2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && dish.equalsIgnoreCase("parsleysalad")){
              parsleysalad2++;
             }
           
            }
         dcd.setValue(Steak2, "Connecticut", "Steak");
         dcd.setValue(kombu2, "Connecticut", "kombu");
         dcd.setValue(Asparagus2, "Connecticut", "Asparagus");
         dcd.setValue(SteamedMussels2, "Connecticut", "SteamedMussels");
         dcd.setValue(ArugulaSalad2, "Connecticut", "ArugulaSalad");
         dcd.setValue(TurkeyPicadillo2, "Connecticut", "TurkeyPicadillo");
         dcd.setValue(WhiteBeanTostada2, "Connecticut", "WhiteBeanTostada2");
         dcd.setValue(parsleysalad2, "Connecticut", "parsleysalad");
         
        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_report1BtnActionPerformed

    private void report2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report2BtnActionPerformed
        
         DefaultCategoryDataset dcd= new DefaultCategoryDataset();
       int Iron=700,Iodine=400,VitaminD=600,VitaminB12=100,Calcium=300,VitaminA=500,Magnesium=250,VitaminK=350;
       int Iron1=500,Iodine1=500,VitaminD1=800,VitaminB121=200,Calcium1=400,VitaminA1=600,Magnesium1=100,VitaminK1=800;
       int Iron2=200,Iodine2=600,VitaminD2=400,VitaminB122=800,Calcium2=100,VitaminA2=250,Magnesium2=500,VitaminK2=400;
       
         for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
            if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("Iron")){
              Iron++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("Iodine")){
              Iodine++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("VitaminD")){
              VitaminD++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("VitaminB12")){
              VitaminB12++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("Calcium")){
              Calcium++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("VitaminA")){
              VitaminA++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("Magnesium")){
              Magnesium++;
             }
           if((network.equalsIgnoreCase("Boston")) && deficiency.equalsIgnoreCase("VitaminK")){
              VitaminK++;
             }
           
            }
         dcd.setValue(Iron, "Boston", "Iron");
         dcd.setValue(Iodine, "Boston", "Iodine");
         dcd.setValue(VitaminD, "Boston", "VitaminD");
         dcd.setValue(VitaminB12, "Boston", "VitaminB12");
         dcd.setValue(Calcium, "Boston", "Calcium");
         dcd.setValue(VitaminA, "Boston", "VitaminA");
         dcd.setValue(Magnesium, "Boston", "Magnesium");
         dcd.setValue(VitaminK, "Boston", "VitaminK");
         
         
       JFreeChart jchart = ChartFactory.createBarChart("Most common deficiencies", "Networks", "count", dcd, PlotOrientation.VERTICAL, true, true, false);
       
       CategoryPlot plot = jchart.getCategoryPlot();
       plot.setRangeGridlinePaint(Color.BLACK);
       
       
       ChartFrame chartFrame = new ChartFrame("Meals",jchart,true);
       chartFrame.setVisible(true);
       chartFrame.setSize(2000,1000); 
       
       
       for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
         
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("Iron")){
              Iron1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("Iodine")){
              Iodine1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("VitaminD")){
              VitaminD1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("VitaminB12")){
              VitaminB121++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("Calcium")){
              Calcium1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("VitaminA")){
              VitaminA1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("Magnesium")){
              Magnesium1++;
             }
           if((network.equalsIgnoreCase("New York")) && deficiency.equalsIgnoreCase("VitaminK")){
              VitaminK1++;
             }
           
            }
         dcd.setValue(Iron1, "New York", "Iron");
         dcd.setValue(Iodine1, "New York", "Iodine");
         dcd.setValue(VitaminD1, "New York", "VitaminD");
         dcd.setValue(VitaminB121, "New York", "VitaminB12");
         dcd.setValue(Calcium1, "New York", "Calcium");
         dcd.setValue(VitaminA1, "New York", "VitaminA");
         dcd.setValue(Magnesium1, "New York", "Magnesium");
         dcd.setValue(VitaminK1, "New York", "VitaminK");
         
        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);
        
        for(int i=0;i<dishList.size();i++){
           String network = networkList.get(i);
           String deficiency = deficiencyList.get(i);
           String dish = dishList.get(i);
           
             if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("Iron")){
              Iron2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("Iodine")){
              Iodine2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("VitaminD")){
              VitaminD2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("VitaminB12")){
              VitaminB122++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("Calcium")){
              Calcium2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("VitaminA")){
              VitaminA2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("Magnesium")){
              Magnesium2++;
             }
           if((network.equalsIgnoreCase("Connecticut")) && deficiency.equalsIgnoreCase("VitaminK")){
              VitaminK2++;
             }
           
            }
         dcd.setValue(Iron2, "Connecticut", "Iron");
         dcd.setValue(Iodine2, "Connecticut", "Iodine");
         dcd.setValue(VitaminD2, "Connecticut", "VitaminD");
         dcd.setValue(VitaminB122, "Connecticut", "VitaminB12");
         dcd.setValue(Calcium2, "Connecticut", "Calcium");
         dcd.setValue(VitaminA2, "Connecticut", "VitaminA");
         dcd.setValue(Magnesium2, "Connecticut", "Magnesium");
         dcd.setValue(VitaminK2, "Connecticut", "VitaminK");
         
        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_report2BtnActionPerformed

    private void report3BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report3BtnActionPerformed
        
         DefaultPieDataset dcd = new DefaultPieDataset();
        int Pollen=10,Lactose=100,Anaphylaxis=55,Casein=10,Gluten=60,Parvalbumin=30,Sesamumindicum=20,Glycinemax=30,ImmunoglobulinE=40;
        for(int i=0;i<allerginList.size();i++){
           String allergin = allerginList.get(i);
           
           if(allergin.equalsIgnoreCase("Pollen")){
              Pollen++;
             }
           if(allergin.equalsIgnoreCase("Lactose")){
              Lactose++;
             }
           if(allergin.equalsIgnoreCase("Anaphylaxis")){
              Anaphylaxis++;
             }
           if(allergin.equalsIgnoreCase("Casein")){
              Casein++;
             }
           if(allergin.equalsIgnoreCase("Gluten")){
              Gluten++;
             }
           if(allergin.equalsIgnoreCase("Parvalbumin")){
              Parvalbumin++;
             }
           if(allergin.equalsIgnoreCase("Sesamumindicum")){
              Sesamumindicum++;
             }
           if(allergin.equalsIgnoreCase("Glycinemax")){
              Glycinemax++;
             }
           if(allergin.equalsIgnoreCase("ImmunoglobulinE")){
              ImmunoglobulinE++;
             }
       
           }
        dcd.setValue("Pollen", Pollen);
        dcd.setValue("Lactose", Lactose);
        dcd.setValue("Anaphylaxis", Anaphylaxis);
        dcd.setValue("Casein", Casein);
        dcd.setValue("Gluten", Gluten);
        dcd.setValue("Parvalbumin", Parvalbumin);
        dcd.setValue("Sesamumindicum", Sesamumindicum);
        dcd.setValue("Glycinemax", Glycinemax);
        dcd.setValue("ImmunoglobulinE", ImmunoglobulinE);
        
        
        JFreeChart chart = ChartFactory.createPieChart3D("Predominent Allergin in Diseases", dcd, true, true,true);
        PiePlot3D plot = (PiePlot3D)chart.getPlot();
        
        ChartFrame panel = new ChartFrame("Pie Chart",chart);
        panel.setVisible(true);
        panel.setSize(2000,1000);
    }//GEN-LAST:event_report3BtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton report1Btn;
    private javax.swing.JButton report2Btn;
    private javax.swing.JButton report3Btn;
    // End of variables declaration//GEN-END:variables
}
