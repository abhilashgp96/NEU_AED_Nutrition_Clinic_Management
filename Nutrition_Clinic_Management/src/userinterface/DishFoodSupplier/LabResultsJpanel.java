/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DishFoodSupplier;

import Business.Nutritionist.Patient;
import Business.Dish.Dish;
import Business.Environment;
import Business.Enterprise.Enterprise;
import Business.Allergin.Allergin;
import Business.Network.Network;
import Business.Organization.DishFoodOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DishWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.CateringWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import userinterface.LabAssistantRole.ProcessWorkRequestJPanel;

/**
 *
 * @author abhilashgp
 */
public class LabResultsJpanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Environment business;
    private UserAccount userAccount;
    private DishFoodOrganization dishFoodOrganization;
    private Enterprise enterprise;
    private Network network;
    private static Logger log = Logger.getLogger(LabResultsJpanel.class);
    private static final String CLASS_NAME = LabResultsJpanel.class.getName();

    /**
     * Creates new form LabResultsJpanel
     */
    public LabResultsJpanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise, DishFoodOrganization dishFoodOrganization, Network network,Environment business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.dishFoodOrganization = dishFoodOrganization;
        this.enterprise = enterprise;
        this.network = network;
        this.business = business;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        generateDishFoodJButton = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(230, 224, 224));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 20)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Age", "Sex", "Message", "Sender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setRowHeight(30);
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 152, 900, 290));

        generateDishFoodJButton.setBackground(new java.awt.Color(0, 0, 0));
        generateDishFoodJButton.setFont(new java.awt.Font("Nirmala UI", 1, 20)); // NOI18N
        generateDishFoodJButton.setForeground(new java.awt.Color(255, 255, 255));
        generateDishFoodJButton.setText("Generate DishFood");
        generateDishFoodJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDishFoodJButtonActionPerformed(evt);
            }
        });
        add(generateDishFoodJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 480, 240, 40));

        backBtn.setBackground(new java.awt.Color(0, 0, 0));
        backBtn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 480, 110, 40));

        jLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 48)); // NOI18N
        jLabel1.setText("Lab Results");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, -1, 53));

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Pictures\\Images\\icons8-lab-coat-100.png")); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : dishFoodOrganization.getWorkQueue().getWorkRequestList()) {

            if (((DishWorkRequest) request).getPatient() != null) {
                Object[] row = new Object[7];
                row[0] = ((DishWorkRequest) request).getPatient();
                row[1] = ((DishWorkRequest) request).getPatient().getAge();
                row[2] = ((DishWorkRequest) request).getPatient().getSex();
                row[3] = ((DishWorkRequest) request).getPatient().getTest();

                row[4] = request.getSender().getEmployee().getEmpName();
                               model.addRow(row);
            }
        }

    }

    private void generateDishFoodJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDishFoodJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

         if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        
        int flag = 0;
        Patient patient = (Patient) workRequestJTable.getValueAt(selectedRow, 0);
        if(patient.getNewDish()!=null)
        {
            JOptionPane.showMessageDialog(null, "DishFood has been identified already");
        }
        
        List<String> patientAllergin = new ArrayList<>();
        for (int i = 0; i < patient.getAllerginHistory().getAllerginRecord().size(); i++) {
            Allergin g = patient.getAllerginHistory().getAllerginRecord().get(i);
            patientAllergin.add(g.getAllerginName());

        }
        Collections.sort(patientAllergin);
        List<String> totalDishFoodAllergin = new ArrayList<>();
        for (Dish d : business.getDishLst().getDishLst()) {
            List<String> dishFoodAllergin = new ArrayList<>();
            for (int i = 0; i < d.getAllergenRecord().getAllerginRecord().size(); i++) {
                Allergin g = d.getAllergenRecord().getAllerginRecord().get(i);
                dishFoodAllergin.add(g.getAllerginName());
                totalDishFoodAllergin.add(g.getAllerginName());
            }
            Collections.sort(dishFoodAllergin);

            if (dishFoodAllergin.equals(patientAllergin)) {
                ExistingDishFoodResultsJpanel existingDishFoodResultsJpanel = new ExistingDishFoodResultsJpanel(userProcessContainer, userAccount, enterprise, dishFoodOrganization, network, d);

                userProcessContainer.add("existingDrugResultsJpanel", existingDishFoodResultsJpanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                flag = 1;
            }

        }
        System.out.println(totalDishFoodAllergin.containsAll(patientAllergin));
         if (!totalDishFoodAllergin.containsAll(patientAllergin)) {
                NonExistingAllerginJpanel nonExistingAllerginJpanel = new NonExistingAllerginJpanel(userProcessContainer, userAccount, enterprise, dishFoodOrganization, network);

                userProcessContainer.add("nonExistingAllerginJpanel", nonExistingAllerginJpanel);
                log.debug(userAccount+" "+"entering nonexisting page as DishFood doesn't exist");
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
                flag = 2;
            }
        

        if (flag == 0) {
            GenerateDishFoodNewDishFoodJPanel generateDishFoodNewDishFoodJPanel = new GenerateDishFoodNewDishFoodJPanel(userProcessContainer, patient, dishFoodOrganization, userAccount, network,business);

            userProcessContainer.add("generateDishFoodNewDishFoodJPanel", generateDishFoodNewDishFoodJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            log.debug(userAccount+" "+"entering new dishFood page as no dishFood exists");
            layout.next(userProcessContainer);
        }


    }//GEN-LAST:event_generateDishFoodJButtonActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DishFoodSupplierWorkArea dwjp = (DishFoodSupplierWorkArea) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton generateDishFoodJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
