/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CateringRole;

import Business.Enterprise.Enterprise;
import Business.DishFoodCatalogue.DishFoodCatalogue;
import Business.DishFoodCatalogue.DishFoodCatalogueDirectory;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.CateringOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DishWorkRequest;
import Business.WorkQueue.CateringWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author soumya
 */
public class CateringWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form CateringWorkArea
     */
    JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private DishFoodCatalogueDirectory dd;
    private Organization org;
    private CateringOrganization caterorg;
    private Network network;
    private static Logger log = Logger.getLogger(CateringWorkArea.class);
    private static final String CLASS_NAME = CateringWorkArea.class.getName();

    public CateringWorkArea(JPanel userProcessContainer, UserAccount userAccount, CateringOrganization organization, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.caterorg = organization;
        this.network = network;
        reorderTable();
        populateDocTable();
        log.debug(userAccount+" "+" has logged in");
    }

    public void reorderTable() {
        int rowCount = CateringTble.getRowCount();
        DefaultTableModel model = (DefaultTableModel) CateringTble.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (DishFoodCatalogue d : caterorg.getDishFoodLst()) {
            Object row[] = new Object[6];
            row[0] = d;
            row[1] = d.getSerialNumber();
            row[2] = d.getAvailableQuantity();
            row[3] = d.getReqdQuant();
            row[4] = d.getReorderStatus();
            //row[5] = d.getReorderStatus();
            model.addRow(row);
        }
    }

    public void populateDocTable() {
        DefaultTableModel model = (DefaultTableModel) nutritionistrequestTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : caterorg.getWorkQueue().getWorkRequestList()) {
            System.out.println("Dish values");
           
             if(request instanceof CateringWorkRequest){
            Object[] row = new Object[3];
            row[0] = ((CateringWorkRequest) request).getDishFoodName();
            row[1] = ((CateringWorkRequest) request).getQuantity();
            row[2] = ((CateringWorkRequest) request).getStatus();

            model.addRow(row);
             }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        nutritionistrequestTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        CateringTble = new javax.swing.JTable();
        serialNumLbl = new javax.swing.JLabel();
        serialNumberTxtField = new javax.swing.JTextField();
        DishNameLbl = new javax.swing.JLabel();
        DishNameTxtField = new javax.swing.JTextField();
        availQuantityLbl = new javax.swing.JLabel();
        availQuantityTxtField = new javax.swing.JTextField();
        reqQuantityLbl = new javax.swing.JLabel();
        reqQuantityTxtField = new javax.swing.JTextField();
        viewRequestsBtn = new javax.swing.JButton();
        AddDishBtn = new javax.swing.JButton();
        viewDetailsBtn = new javax.swing.JButton();
        statusCheckBtn = new javax.swing.JButton();
        CateringLbl = new javax.swing.JLabel();
        dishlbl = new javax.swing.JLabel();
        inventorylbl = new javax.swing.JLabel();
        lblView = new javax.swing.JLabel();
        lblCatering = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nutritionistrequestTable.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 20)); // NOI18N
        nutritionistrequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DISH NAME", "QUANTITY", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        nutritionistrequestTable.setRowHeight(26);
        jScrollPane.setViewportView(nutritionistrequestTable);

        add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 686, 714, 177));

        CateringTble.setBorder(new javax.swing.border.MatteBorder(null));
        CateringTble.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 20)); // NOI18N
        CateringTble.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DISH NAME", "SERIAL NUMBER ", "AVAILABILE QUANTITY", "REQUIRED QUANTITY", "REORDER STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CateringTble.setRowHeight(26);
        jScrollPane1.setViewportView(CateringTble);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 111, 960, 238));

        serialNumLbl.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        serialNumLbl.setText("SERIAL NUMBER: ");
        add(serialNumLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 382, 241, 23));

        serialNumberTxtField.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 20)); // NOI18N
        serialNumberTxtField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(serialNumberTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(561, 382, 252, 30));

        DishNameLbl.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        DishNameLbl.setText("DISH NAME: ");
        add(DishNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 229, 25));

        DishNameTxtField.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 20)); // NOI18N
        DishNameTxtField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(DishNameTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(561, 423, 252, 30));

        availQuantityLbl.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        availQuantityLbl.setText("AVAILABLE QUANTITY:");
        add(availQuantityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 467, 282, -1));

        availQuantityTxtField.setFont(new java.awt.Font("Nirmala UI", 1, 20)); // NOI18N
        availQuantityTxtField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(availQuantityTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 470, 252, 30));

        reqQuantityLbl.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        reqQuantityLbl.setText("REQUIRED QUANTITY:");
        add(reqQuantityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 506, 293, -1));

        reqQuantityTxtField.setFont(new java.awt.Font("Nirmala UI", 1, 20)); // NOI18N
        reqQuantityTxtField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        reqQuantityTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqQuantityTxtFieldActionPerformed(evt);
            }
        });
        add(reqQuantityTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 510, 252, 30));

        viewRequestsBtn.setFont(new java.awt.Font("Nirmala UI", 0, 24)); // NOI18N
        viewRequestsBtn.setText("VIEW REQUESTS");
        viewRequestsBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewRequestsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRequestsBtnActionPerformed(evt);
            }
        });
        add(viewRequestsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 504, 251, 40));

        AddDishBtn.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        AddDishBtn.setText("ADD DISH");
        AddDishBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        AddDishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDishBtnActionPerformed(evt);
            }
        });
        add(AddDishBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 580, 251, -1));

        viewDetailsBtn.setFont(new java.awt.Font("Nirmala UI", 0, 24)); // NOI18N
        viewDetailsBtn.setText("VIEW DETAILS");
        viewDetailsBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });
        add(viewDetailsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 440, 251, 40));

        statusCheckBtn.setFont(new java.awt.Font("Nirmala UI", 0, 24)); // NOI18N
        statusCheckBtn.setText("INVENTORY STATUS CHECK");
        statusCheckBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        statusCheckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusCheckBtnActionPerformed(evt);
            }
        });
        add(statusCheckBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 200, 350, -1));

        CateringLbl.setFont(new java.awt.Font("Nirmala UI", 1, 48)); // NOI18N
        CateringLbl.setText("Catering Work Area");
        add(CateringLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));
        add(dishlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 570, 110, 60));

        inventorylbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-inventory-64.png"))); // NOI18N
        add(inventorylbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 120, 80, 70));

        lblView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-view-48.png"))); // NOI18N
        add(lblView, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 440, 80, 100));

        lblCatering.setFont(new java.awt.Font("Nirmala UI", 0, 13)); // NOI18N
        lblCatering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/catering.png"))); // NOI18N
        add(lblCatering, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, 120, 70));
    }// </editor-fold>//GEN-END:initComponents

    private void reqQuantityTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqQuantityTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqQuantityTxtFieldActionPerformed

    private void viewRequestsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRequestsBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ViewRequestJPanel", new ViewRequestsJPanel(userProcessContainer, userAccount, enterprise, org));
        layout.next(userProcessContainer);


    }//GEN-LAST:event_viewRequestsBtnActionPerformed

    private void AddDishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDishBtnActionPerformed
        // TODO add your handling code here:

        DishFoodCatalogue m = new DishFoodCatalogue();
        String name = DishNameTxtField.getText().trim();
        String error_message = "";
        String avail = availQuantityTxtField.getText();
        try {
            Integer.parseInt(avail);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "quantity must be in integer");
            return;

        }
        if(name.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the name ");
            return;
        }
        
        m.setDishFoodName(DishNameTxtField.getText());
        try{
        int availableQuantity = Integer.parseInt(availQuantityTxtField.getText());
        m.setAvailableQuantity(availableQuantity);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "serial number must be integer!");
            return;
        }
        try{
        int serialNumber = Integer.parseInt(serialNumberTxtField.getText());
        m.setSerialNumber(serialNumber);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "serial number must be integer!");
            return;
        }
        String req = reqQuantityTxtField.getText();
        try {
           
            m.setReqdQuant( Integer.parseInt(req));
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(null, "Required quantity must be integer!");
            return;
        }
       
//        ArrayList<String> medicineCheck = new ArrayList<>();
//        for(DishFoodCatalogue mc:pharmorg.getMedList())
//        {
//            medicineCheck.add(mc.getMedicineName().toLowerCase());
//        }
//        if(medicineCheck.contains(name.toLowerCase()))
//        {
//            JOptionPane.showMessageDialog(null, "medicine already existed please update the quantity by clicking on view details");
//            return;
//        }
        caterorg.addDishFood(m);
        m.setReorderStatus("N");

        DefaultTableModel dtm = (DefaultTableModel) CateringTble.getModel();

        dtm.setRowCount(0);
        for (DishFoodCatalogue df : caterorg.getDishFoodLst()) {
            Object row[] = new Object[5];
            row[0] = df;
            row[1] = df.getSerialNumber();
            row[2] = df.getAvailableQuantity();
            row[3] = df.getReqdQuant();
            row[4] = df.getReorderStatus();
            dtm.addRow(row);
        }

        JOptionPane.showMessageDialog(null, "Dish Added Successfully", "Warning", JOptionPane.INFORMATION_MESSAGE);
        log.debug("dish added successfully");
        serialNumberTxtField.setText("");
        DishNameTxtField.setText("");
        availQuantityTxtField.setText("");
        reqQuantityTxtField.setText("");

    }//GEN-LAST:event_AddDishBtnActionPerformed

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:
        int row = CateringTble.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DishFoodCatalogue a = (DishFoodCatalogue) CateringTble.getValueAt(row, 0);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("UpdateEntryJPanel", new ViewDetailsJPanel(userProcessContainer, userAccount, enterprise, a));
        log.debug(userAccount+" "+"entering view details page");
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void statusCheckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusCheckBtnActionPerformed
        // TODO add your handling code here:
        int checkDish=0; 
        for (DishFoodCatalogue a : caterorg.getDishFoodLst()) {
            checkDish++;
         }
         
         if(checkDish<=0)
        {
            JOptionPane.showMessageDialog(null,"No items present for inventory check  ");
            return;
        }
        for (DishFoodCatalogue a : caterorg.getDishFoodLst()) {

            if (a.getAvailableQuantity() <= a.getReqdQuant()) {
                if (!a.getReorderStatus().equals("Y")) {
                    DishWorkRequest request = new DishWorkRequest();
                    
                    a.setReorderStatus("Y");
                    request.setDishName(a.getDishFoodName());
                    request.setQuantity(a.getReqdQuant());
                    request.setSender(userAccount);

                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseLst()) {
                        System.out.println("** Organization Name:" + enterprise.getOrgName());
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationLst()) {
                            System.out.println("** Organization Name:" + organization.getOrgName());
                            if (organization.getOrgName().equals("Food Supplier Organization")) {
                                System.out.println("True");

                                System.out.println("** organization Name" + organization.getOrgName());

                                organization.getWorkQueue().getWorkRequestList().add(request);
                                log.debug(userAccount+" "+"request sent to DishFood Organization");
                            }
                        }

                    }

                }

            }
        }
        JOptionPane.showMessageDialog(null, "Inventory status checked and updated!", "Warning", JOptionPane.INFORMATION_MESSAGE);
        reorderTable();
    }//GEN-LAST:event_statusCheckBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDishBtn;
    private javax.swing.JLabel CateringLbl;
    private javax.swing.JTable CateringTble;
    private javax.swing.JLabel DishNameLbl;
    private javax.swing.JTextField DishNameTxtField;
    private javax.swing.JLabel availQuantityLbl;
    private javax.swing.JTextField availQuantityTxtField;
    private javax.swing.JLabel dishlbl;
    private javax.swing.JLabel inventorylbl;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCatering;
    private javax.swing.JLabel lblView;
    private javax.swing.JTable nutritionistrequestTable;
    private javax.swing.JLabel reqQuantityLbl;
    private javax.swing.JTextField reqQuantityTxtField;
    private javax.swing.JLabel serialNumLbl;
    private javax.swing.JTextField serialNumberTxtField;
    private javax.swing.JButton statusCheckBtn;
    private javax.swing.JButton viewDetailsBtn;
    private javax.swing.JButton viewRequestsBtn;
    // End of variables declaration//GEN-END:variables
}
